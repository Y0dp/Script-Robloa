local library = {flags = {}, windows = {}, open = true}

-- Services
local runService = game:GetService("RunService")
local tweenService = game:GetService("TweenService")
local textService = game:GetService("TextService")
local inputService = game:GetService("UserInputService")
local ui = Enum.UserInputType.MouseButton1

-- Colors
local BLACK = Color3.fromRGB(0, 0, 0)
local WHITE = Color3.fromRGB(255, 255, 255)
local DARK_GRAY = Color3.fromRGB(20, 20, 20)
local GRAY = Color3.fromRGB(50, 50, 50)
local LIGHT_GRAY = Color3.fromRGB(100, 100, 100)

-- Locals
local dragging, dragInput, dragStart, startPos, dragObject

-- Functions
local function round(num, bracket)
    bracket = bracket or 1
    local a = math.floor(num/bracket + (math.sign(num) * 0.5)) * bracket
    if a < 0 then
        a = a + bracket
    end
    return a
end

local function keyCheck(x, x1)
    for _, v in next, x1 do
        if v == x then
            return true
        end
    end
end

local function update(input)
    local delta = input.Position - dragStart
    local yPos = (startPos.Y.Offset + delta.Y) < -36 and -36 or startPos.Y.Offset + delta.Y
    dragObject:TweenPosition(UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, yPos), "Out", "Quint", 0.1, true)
end

function library:Create(class, properties)
    properties = typeof(properties) == "table" and properties or {}
    local inst = Instance.new(class)
    for property, value in next, properties do
        inst[property] = value
    end
    return inst
end

-- Create main GUI
library.base = library:Create("ScreenGui", {
    Name = "BlackWhiteUI",
    Parent = game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui")
})

local function createOptionHolder(holderTitle, parent, parentTable, subHolder)
    local size = subHolder and 34 or 40
    parentTable.main = library:Create("ImageButton", {
        LayoutOrder = subHolder and parentTable.position or 0,
        Position = UDim2.new(0, 20 + (250 * (parentTable.position or 0)), 0, 20),
        Size = UDim2.new(0, 230, 0, size),
        BackgroundTransparency = 1,
        Image = "rbxassetid://3570695787",
        ImageColor3 = DARK_GRAY,
        ScaleType = Enum.ScaleType.Slice,
        SliceCenter = Rect.new(100, 100, 100, 100),
        SliceScale = 0.04,
        ClipsDescendants = true,
        Parent = parent
    })
    
    local round
    if not subHolder then
        round = library:Create("ImageLabel", {
            Size = UDim2.new(1, 0, 0, size),
            BackgroundTransparency = 1,
            Image = "rbxassetid://3570695787",
            ImageColor3 = parentTable.open and (subHolder and DARK_GRAY or BLACK) or (subHolder and BLACK or DARK_GRAY),
            ScaleType = Enum.ScaleType.Slice,
            SliceCenter = Rect.new(100, 100, 100, 100),
            SliceScale = 0.04,
            Parent = parentTable.main
        })
    end
    
    local title = library:Create("TextLabel", {
        Size = UDim2.new(1, 0, 0, size),
        BackgroundTransparency = subHolder and 0 or 1,
        BackgroundColor3 = BLACK,
        BorderSizePixel = 0,
        Text = holderTitle,
        TextSize = subHolder and 16 or 17,
        Font = Enum.Font.GothamBold,
        TextColor3 = WHITE,
        Parent = parentTable.main
    })
    
    local closeHolder = library:Create("Frame", {
        Position = UDim2.new(1, 0, 0, 0),
        Size = UDim2.new(-1, 0, 1, 0),
        SizeConstraint = Enum.SizeConstraint.RelativeYY,
        BackgroundTransparency = 1,
        Parent = title
    })
    
    local close = library:Create("ImageLabel", {
        AnchorPoint = Vector2.new(0.5, 0.5),
        Position = UDim2.new(0.5, 0, 0.5, 0),
        Size = UDim2.new(1, -size - 10, 1, -size - 10),
        Rotation = parentTable.open and 90 or 180,
        BackgroundTransparency = 1,
        Image = "rbxassetid://4918373417",
        ImageColor3 = parentTable.open and GRAY or LIGHT_GRAY,
        ScaleType = Enum.ScaleType.Fit,
        Parent = closeHolder
    })
    
    parentTable.content = library:Create("Frame", {
        Position = UDim2.new(0, 0, 0, size),
        Size = UDim2.new(1, 0, 1, -size),
        BackgroundTransparency = 1,
        Parent = parentTable.main
    })
    
    local layout = library:Create("UIListLayout", {
        SortOrder = Enum.SortOrder.LayoutOrder,
        Parent = parentTable.content
    })
    
    layout.Changed:connect(function()
        parentTable.content.Size = UDim2.new(1, 0, 0, layout.AbsoluteContentSize.Y)
        parentTable.main.Size = #parentTable.options > 0 and parentTable.open and UDim2.new(0, 230, 0, layout.AbsoluteContentSize.Y + size) or UDim2.new(0, 230, 0, size)
    end)
    
    if not subHolder then
        library:Create("UIPadding", {
            PaddingLeft = UDim.new(0, 6),
            PaddingRight = UDim.new(0, 6),
            PaddingTop = UDim.new(0, 6),
            Parent = parentTable.content
        })
        
        title.InputBegan:connect(function(input)
            if input.UserInputType == ui then
                dragObject = parentTable.main
                dragging = true
                dragStart = input.Position
                startPos = dragObject.Position
            end
        end)
        
        title.InputChanged:connect(function(input)
            if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                dragInput = input
            end
        end)
        
        title.InputEnded:connect(function(input)
            if input.UserInputType == ui then
                dragging = false
            end
        end)
    end
    
    closeHolder.InputBegan:connect(function(input)
        if input.UserInputType == ui then
            parentTable.open = not parentTable.open
            tweenService:Create(close, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
                Rotation = parentTable.open and 90 or 180,
                ImageColor3 = parentTable.open and GRAY or LIGHT_GRAY
            }):Play()
            
            if subHolder then
                tweenService:Create(title, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
                    BackgroundColor3 = parentTable.open and DARK_GRAY or BLACK
                }):Play()
            else
                tweenService:Create(round, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
                    ImageColor3 = parentTable.open and BLACK or DARK_GRAY
                }):Play()
            end
            
            parentTable.main:TweenSize(#parentTable.options > 0 and parentTable.open and UDim2.new(0, 230, 0, layout.AbsoluteContentSize.Y + size) or UDim2.new(0, 230, 0, size), "Out", "Quad", 0.2, true)
        end
    end)

    function parentTable:SetTitle(newTitle)
        title.Text = tostring(newTitle)
    end
    
    return parentTable
end

function createToggle(option, parent)
    local main = library:Create("TextLabel", {
        LayoutOrder = option.position,
        Size = UDim2.new(1, 0, 0, 31),
        BackgroundTransparency = 1,
        Text = " " .. option.text,
        TextSize = 16,
        Font = Enum.Font.Gotham,
        TextColor3 = WHITE,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = parent.content
    })
    
    local tickboxOutline = library:Create("ImageLabel", {
        Position = UDim2.new(1, -6, 0, 4),
        Size = UDim2.new(-1, 10, 1, -10),
        SizeConstraint = Enum.SizeConstraint.RelativeYY,
        BackgroundTransparency = 1,
        Image = "rbxassetid://3570695787",
        ImageColor3 = option.state and WHITE or GRAY,
        ScaleType = Enum.ScaleType.Slice,
        SliceCenter = Rect.new(100, 100, 100, 100),
        SliceScale = 0.02,
        Parent = main
    })
    
    local tickboxInner = library:Create("ImageLabel", {
        Position = UDim2.new(0, 2, 0, 2),
        Size = UDim2.new(1, -4, 1, -4),
        BackgroundTransparency = 1,
        Image = "rbxassetid://3570695787",
        ImageColor3 = option.state and WHITE : LIGHT_GRAY,
        ScaleType = Enum.ScaleType.Slice,
        SliceCenter = Rect.new(100, 100, 100, 100),
        SliceScale = 0.02,
        Parent = tickboxOutline
    })
    
    local checkmarkHolder = library:Create("Frame", {
        Position = UDim2.new(0, 4, 0, 4),
        Size = option.state and UDim2.new(1, -8, 1, -8) or UDim2.new(0, 0, 1, -8),
        BackgroundTransparency = 1,
        ClipsDescendants = true,
        Parent = tickboxOutline
    })
    
    local checkmark = library:Create("ImageLabel", {
        Size = UDim2.new(1, 0, 1, 0),
        SizeConstraint = Enum.SizeConstraint.RelativeYY,
        BackgroundTransparency = 1,
        Image = "rbxassetid://4919148038",
        ImageColor3 = BLACK,
        Parent = checkmarkHolder
    })
    
    local inContact
    main.InputBegan:connect(function(input)
        if input.UserInputType == ui then
            option:SetState(not option.state)
        end
        
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            inContact = true
            if not option.state then
                tweenService:Create(tickboxOutline, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
                    ImageColor3 = LIGHT_GRAY
                }):Play()
            end
        end
    end)
    
    main.InputEnded:connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            inContact = false
            if not option.state then
                tweenService:Create(tickboxOutline, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
                    ImageColor3 = GRAY
                }):Play()
            end
        end
    end)
    
    function option:SetState(state)
        library.flags[self.flag] = state
        self.state = state
        
        checkmarkHolder:TweenSize(state and UDim2.new(1, -8, 1, -8) or UDim2.new(0, 0, 1, -8), "Out", "Quad", 0.2, true)
        
        tweenService:Create(tickboxInner, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
            ImageColor3 = state and WHITE : LIGHT_GRAY
        }):Play()
        
        if state then
            tweenService:Create(tickboxOutline, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
                ImageColor3 = WHITE
            }):Play()
        else
            local targetColor = inContact and LIGHT_GRAY or GRAY
            tweenService:Create(tickboxOutline, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
                ImageColor3 = targetColor
            }):Play()
        end
        
        self.callback(state)
    end

    if option.state then
        delay(1, function() option.callback(true) end)
    end
    
    setmetatable(option, {__newindex = function(t, i, v)
        if i == "Text" then
            main.Text = " " .. tostring(v)
        end
    end})
end

function createButton(option, parent)
    local main = library:Create("TextLabel", {
        ZIndex = 2,
        LayoutOrder = option.position,
        Size = UDim2.new(1, 0, 0, 34),
        BackgroundTransparency = 1,
        Text = " " .. option.text,
        TextSize = 16,
        Font = Enum.Font.GothamBold,
        TextColor3 = WHITE,
        Parent = parent.content
    })
    
    local round = library:Create("ImageLabel", {
        AnchorPoint = Vector2.new(0.5, 0.5),
        Position = UDim2.new(0.5, 0, 0.5, 0),
        Size = UDim2.new(1, -12, 1, -10),
        BackgroundTransparency = 1,
        Image = "rbxassetid://3570695787",
        ImageColor3 = GRAY,
        ScaleType = Enum.ScaleType.Slice,
        SliceCenter = Rect.new(100, 100, 100, 100),
        SliceScale = 0.02,
        Parent = main
    })
    
    local inContact
    local clicking
    
    main.InputBegan:connect(function(input)
        if input.UserInputType == ui then
            library.flags[option.flag] = true
            clicking = true
            tweenService:Create(round, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
                ImageColor3 = WHITE
            }):Play()
            option.callback()
        end
        
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            inContact = true
            tweenService:Create(round, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
                ImageColor3 = LIGHT_GRAY
            }):Play()
        end
    end)
    
    main.InputEnded:connect(function(input)
        if input.UserInputType == ui then
            clicking = false
            local targetColor = inContact and LIGHT_GRAY or GRAY
            tweenService:Create(round, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
                ImageColor3 = targetColor
            }):Play()
        end
        
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            inContact = false
            if not clicking then
                tweenService:Create(round, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
                    ImageColor3 = GRAY
                }):Play()
            end
        end
    end)
end

function createSlider(option, parent)
    local main = library:Create("Frame", {
        LayoutOrder = option.position,
        Size = UDim2.new(1, 0, 0, 50),
        BackgroundTransparency = 1,
        Parent = parent.content
    })
    
    local title = library:Create("TextLabel", {
        Position = UDim2.new(0, 0, 0, 4),
        Size = UDim2.new(1, 0, 0, 20),
        BackgroundTransparency = 1,
        Text = " " .. option.text,
        TextSize = 16,
        Font = Enum.Font.Gotham,
        TextColor3 = WHITE,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = main
    })
    
    local slider = library:Create("ImageLabel", {
        Position = UDim2.new(0, 10, 0, 34),
        Size = UDim2.new(1, -20, 0, 5),
        BackgroundTransparency = 1,
        Image = "rbxassetid://3570695787",
        ImageColor3 = DARK_GRAY,
        ScaleType = Enum.ScaleType.Slice,
        SliceCenter = Rect.new(100, 100, 100, 100),
        SliceScale = 0.02,
        Parent = main
    })
    
    local fill = library:Create("ImageLabel", {
        BackgroundTransparency = 1,
        Image = "rbxassetid://3570695787",
        ImageColor3 = GRAY,
        ScaleType = Enum.ScaleType.Slice,
        SliceCenter = Rect.new(100, 100, 100, 100),
        SliceScale = 0.02,
        Parent = slider
    })
    
    local circle = library:Create("ImageLabel", {
        AnchorPoint = Vector2.new(0.5, 0.5),
        Position = UDim2.new((option.value - option.min) / (option.max - option.min), 0, 0.5, 0),
        Size = UDim2.new(2, 0, 2, 0),
        BackgroundTransparency = 1,
        Image = "rbxassetid://3570695787",
        ImageColor3 = WHITE,
        ScaleType = Enum.ScaleType.Slice,
        SliceCenter = Rect.new(100, 100, 100, 100),
        SliceScale = 1,
        Parent = slider
    })
    
    local valueRound = library:Create("ImageLabel", {
        Position = UDim2.new(1, -6, 0, 4),
        Size = UDim2.new(0, -60, 0, 18),
        BackgroundTransparency = 1,
        Image = "rbxassetid://3570695787",
        ImageColor3 = GRAY,
        ScaleType = Enum.ScaleType.Slice,
        SliceCenter = Rect.new(100, 100, 100, 100),
        SliceScale = 0.02,
        Parent = main
    })
    
    local inputvalue = library:Create("TextBox", {
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundTransparency = 1,
        Text = option.value,
        TextColor3 = WHITE,
        TextSize = 14,
        TextWrapped = true,
        Font = Enum.Font.Gotham,
        Parent = valueRound
    })
    
    if option.min >= 0 then
        fill.Size = UDim2.new((option.value - option.min) / (option.max - option.min), 0, 1, 0)
    else
        fill.Position = UDim2.new((0 - option.min) / (option.max - option.min), 0, 0, 0)
        fill.Size = UDim2.new(option.value / (option.max - option.min), 0, 1, 0)
    end
    
    local sliding
    local inContact
    
    main.InputBegan:connect(function(input)
        if input.UserInputType == ui then
            tweenService:Create(fill, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
                ImageColor3 = WHITE
            }):Play()
            tweenService:Create(circle, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
                Size = UDim2.new(3, 0, 3, 0),
                ImageColor3 = WHITE
            }):Play()
            sliding = true
            option:SetValue(option.min + ((input.Position.X - slider.AbsolutePosition.X) / slider.AbsoluteSize.X) * (option.max - option.min))
        end
        
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            inContact = true
            if not sliding then
                tweenService:Create(fill, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
                    ImageColor3 = LIGHT_GRAY
                }):Play()
                tweenService:Create(circle, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
                    Size = UDim2.new(2.5, 0, 2.5, 0),
                    ImageColor3 = LIGHT_GRAY
                }):Play()
            end
        end
    end)
    
    inputService.InputChanged:connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement and sliding then
            option:SetValue(option.min + ((input.Position.X - slider.AbsolutePosition.X) / slider.AbsoluteSize.X) * (option.max - option.min))
        end
    end)

    main.InputEnded:connect(function(input)
        if input.UserInputType == ui then
            sliding = false
            local targetColor = inContact and LIGHT_GRAY or GRAY
            tweenService:Create(fill, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
                ImageColor3 = targetColor
            }):Play()
            tweenService:Create(circle, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
                Size = UDim2.new(2, 0, 2, 0),
                ImageColor3 = targetColor
            }):Play()
        end
        
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            inContact = false
            inputvalue:ReleaseFocus()
            if not sliding then
                tweenService:Create(fill, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
                    ImageColor3 = GRAY
                }):Play()
                tweenService:Create(circle, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
                    Size = UDim2.new(2, 0, 2, 0),
                    ImageColor3 = GRAY
                }):Play()
            end
        end
    end)

    inputvalue.FocusLost:connect(function()
        tweenService:Create(circle, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
            Size = UDim2.new(2, 0, 2, 0),
            ImageColor3 = GRAY
        }):Play()
        option:SetValue(tonumber(inputvalue.Text) or option.value)
    end)

    function option:SetValue(value)
        value = round(value, option.float)
        value = math.clamp(value, self.min, self.max)
        circle:TweenPosition(UDim2.new((value - self.min) / (self.max - self.min), 0, 0.5, 0), "Out", "Quad", 0.1, true)
        
        if self.min >= 0 then
            fill:TweenSize(UDim2.new((value - self.min) / (self.max - self.min), 0, 1, 0), "Out", "Quad", 0.1, true)
        else
            fill:TweenPosition(UDim2.new((0 - self.min) / (self.max - self.min), 0, 0, 0), "Out", "Quad", 0.1, true)
            fill:TweenSize(UDim2.new(value / (self.max - self.min), 0, 1, 0), "Out", "Quad", 0.1, true)
        end
        
        library.flags[self.flag] = value
        self.value = value
        inputvalue.Text = value
        self.callback(value)
    end
end

-- Create window function
function library:CreateWindow(title)
    local window = {options = {}, tabs = {}}
    window = createOptionHolder(title, self.base, window)
    
    function window:CreateTab(tabTitle)
        local tab = {options = {}, position = #self.tabs}
        tab = createOptionHolder(tabTitle, self.content, tab, true)
        
        function tab:AddToggle(option)
            option = typeof(option) == "table" and option or {}
            option.text = option.text or "Toggle"
            option.state = option.state or false
            option.flag = option.flag or option.text
            option.callback = option.callback or function() end
            option.position = #self.options
            
            library.flags[option.flag] = option.state
            createToggle(option, self)
            self.options[#self.options + 1] = option
            return option
        end
        
        function tab:AddButton(option)
            option = typeof(option) == "table" and option or {}
            option.text = option.text or "Button"
            option.flag = option.flag or option.text
            option.callback = option.callback or function() end
            option.position = #self.options
            
            library.flags[option.flag] = false
            createButton(option, self)
            self.options[#self.options + 1] = option
            return option
        end
        
        function tab:AddSlider(option)
            option = typeof(option) == "table" and option or {}
            option.text = option.text or "Slider"
            option.min = option.min or 0
            option.max = option.max or 100
            option.value = option.value or option.min
            option.float = option.float or 1
            option.flag = option.flag or option.text
            option.callback = option.callback or function() end
            option.position = #self.options
            
            library.flags[option.flag] = option.value
            createSlider(option, self)
            self.options[#self.options + 1] = option
            return option
        end
        
        self.tabs[#self.tabs + 1] = tab
        return tab
    end
    
    self.windows[#self.windows + 1] = window
    return window
end

-- Initialize dragging
inputService.InputChanged:connect(function(input)
    if input == dragInput and dragging then
        update(input)
    end
end)

return library
