-- RedzLikeV2 (single-file UI) -- safe, standalone, no external deps
-- Usage: local Lib = loadstring(...)()  OR paste into a LocalScript and use: local Lib = require(script)

local TweenService = game:GetService("TweenService")
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")

local Lib = {}
Lib.__index = Lib

-- Create ScreenGui
local function CreateGui(name)
    local screen = Instance.new("ScreenGui")
    screen.Name = name or "RedzLikeV2"
    screen.ResetOnSpawn = false
    screen.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    screen.Parent = game:GetService("CoreGui") or Players.LocalPlayer:WaitForChild("PlayerGui")
    return screen
end

-- Helpers
local function round(n) return math.floor(n+0.5) end
local function makeTween(inst,props,time,style,dir)
    local info = TweenInfo.new(time or 0.18, style or Enum.EasingStyle.Quad, dir or Enum.EasingDirection.Out)
    local t = TweenService:Create(inst, info, props)
    t:Play()
    return t
end

-- Basic style values
local THEME = {
    Accent = Color3.fromRGB(44,120,224),
    Background = Color3.fromRGB(20,20,22),
    Section = Color3.fromRGB(28,28,30),
    Text = Color3.fromRGB(230,230,230)
}

-- Create main window
function Lib.NewWindow(title)
    local self = setmetatable({}, Lib)
    self.gui = CreateGui("RedzLikeV2_UI_"..tostring(math.random(1,9999)))
    self.window = Instance.new("Frame")
    self.window.Name = "Window"
    self.window.Size = UDim2.new(0,520,0,360)
    self.window.Position = UDim2.new(0.5, -260, 0.5, -180)
    self.window.AnchorPoint = Vector2.new(0.5,0.5)
    self.window.BackgroundColor3 = THEME.Background
    self.window.BorderSizePixel = 0
    self.window.Parent = self.gui

    -- Header
    local header = Instance.new("Frame", self.window)
    header.Name = "Header"
    header.Size = UDim2.new(1,0,0,36)
    header.BackgroundColor3 = THEME.Section
    header.BorderSizePixel = 0

    local titleLbl = Instance.new("TextLabel", header)
    titleLbl.Size = UDim2.new(1,-12,1,0)
    titleLbl.Position = UDim2.new(0,6,0,0)
    titleLbl.BackgroundTransparency = 1
    titleLbl.Text = title or "RedzLikeV2"
    titleLbl.TextColor3 = THEME.Text
    titleLbl.Font = Enum.Font.SourceSansBold
    titleLbl.TextSize = 18
    titleLbl.TextXAlignment = Enum.TextXAlignment.Left

    -- Container: Tabs + Content
    local left = Instance.new("ScrollingFrame", self.window)
    left.Name = "Tabs"
    left.Position = UDim2.new(0,8,0,46)
    left.Size = UDim2.new(0,140,1,-54)
    left.BackgroundTransparency = 1
    left.ScrollBarThickness = 6
    left.VerticalScrollBarInset = Enum.ScrollBarInset.None
    left.BorderSizePixel = 0

    local right = Instance.new("Frame", self.window)
    right.Name = "Content"
    right.Position = UDim2.new(0,156,0,46)
    right.Size = UDim2.new(1,-164,1,-54)
    right.BackgroundColor3 = THEME.Section
    right.BorderSizePixel = 0
    right.ClipsDescendants = true

    -- Store tabs
    self.tabs = {}
    self.currentTab = nil
    self.left = left
    self.right = right

    -- Make draggable
    local dragging, dragInput, dragStart, startPos
    local function update(input)
        local delta = input.Position - dragStart
        self.window.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
    self.window.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = self.window.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then dragging = false end
            end)
        end
    end)
    self.window.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)
    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then update(input) end
    end)

    return self
end

-- Add Tab
function Lib:AddTab(name)
    local tabBtn = Instance.new("TextButton", self.left)
    tabBtn.Size = UDim2.new(1,-8,0,32)
    tabBtn.Position = UDim2.new(0,4,0,#self.tabs*36)
    tabBtn.BackgroundColor3 = THEME.Section
    tabBtn.BorderSizePixel = 0
    tabBtn.Text = "  "..(name or "Tab")
    tabBtn.TextXAlignment = Enum.TextXAlignment.Left
    tabBtn.TextColor3 = THEME.Text
    tabBtn.Font = Enum.Font.SourceSans
    tabBtn.TextSize = 14

    local content = Instance.new("ScrollingFrame", self.right)
    content.Name = name or ("Tab"..(#self.tabs+1))
    content.Size = UDim2.new(1,0,1,0)
    content.CanvasSize = UDim2.new(0,0,0,0)
    content.BackgroundTransparency = 1
    content.BorderSizePixel = 0
    content.Visible = false
    content.ClipsDescendants = true
    content.ScrollBarThickness = 6
    content.LayoutOrder = #self.tabs+1

    local layout = Instance.new("UIListLayout", content)
    layout.SortOrder = Enum.SortOrder.LayoutOrder
    layout.Padding = UDim.new(0,8)

    local padding = Instance.new("UIPadding", content)
    padding.PaddingTop = UDim.new(0,8)
    padding.PaddingLeft = UDim.new(0,8)
    padding.PaddingRight = UDim.new(0,8)
    padding.PaddingBottom = UDim.new(0,8)

    local tab = {
        name = name,
        button = tabBtn,
        content = content,
        folderCount = 0
    }

    table.insert(self.tabs, tab)

    -- click behavior
    tabBtn.MouseButton1Click:Connect(function()
        for _,t in ipairs(self.tabs) do
            t.button.BackgroundColor3 = THEME.Section
            t.content.Visible = false
        end
        tabBtn.BackgroundColor3 = THEME.Accent
        tab.content.Visible = true
    end)

    -- Auto-select first tab
    if #self.tabs == 1 then
        tabBtn:CaptureFocus()
        tabBtn.BackgroundColor3 = THEME.Accent
        content.Visible = true
        self.currentTab = tab
    end

    -- API to add elements in this tab (folders)
    function tab:AddFolder(folderName)
        tab.folderCount = tab.folderCount + 1
        local folderFrame = Instance.new("Frame", tab.content)
        folderFrame.Size = UDim2.new(1,0,0,40)
        folderFrame.BackgroundColor3 = THEME.Background
        folderFrame.BorderSizePixel = 0
        folderFrame.LayoutOrder = tab.folderCount
        folderFrame.Name = folderName or "Folder"

        local head = Instance.new("TextLabel", folderFrame)
        head.Size = UDim2.new(1,0,0,28)
        head.BackgroundTransparency = 1
        head.Text = folderName or "Folder"
        head.TextColor3 = THEME.Text
        head.Font = Enum.Font.SourceSansBold
        head.TextSize = 15
        head.TextXAlignment = Enum.TextXAlignment.Left
        head.Position = UDim2.new(0,8,0,6)

        local inner = Instance.new("Frame", folderFrame)
        inner.Name = "Inner"
        inner.Size = UDim2.new(1,-16,0,0)
        inner.Position = UDim2.new(0,8,0,36)
        inner.BackgroundTransparency = 1

        local innerLayout = Instance.new("UIListLayout", inner)
        innerLayout.SortOrder = Enum.SortOrder.LayoutOrder
        innerLayout.Padding = UDim.new(0,6)

        -- resize logic: after adding children, update folder size and canvas size
        local function updateSizes()
            wait()
            local total = 36 -- header
            for _,v in ipairs(inner:GetChildren()) do
                if v:IsA("GuiObject") then
                    total = total + v.Size.Y.Offset + 6
                end
            end
            folderFrame.Size = UDim2.new(1,0,0,total)
            tab.content.CanvasSize = UDim2.new(0,0,0, tab.content.UIListLayout.AbsoluteContentSize.Y + 12)
        end

        -- expose add element functions
        local folder = {}

        function folder:AddButton(text, callback)
            local btn = Instance.new("TextButton", inner)
            btn.Size = UDim2.new(1,0,0,30)
            btn.BackgroundColor3 = THEME.Accent
            btn.BorderSizePixel = 0
            btn.Text = text or "Button"
            btn.Font = Enum.Font.SourceSans
            btn.TextColor3 = Color3.new(1,1,1)
            btn.TextSize = 14
            btn.LayoutOrder = #inner:GetChildren()
            btn.MouseButton1Click:Connect(function()
                pcall(function() if callback then callback() end end)
            end)
            updateSizes()
            return btn
        end

        function folder:AddToggle(text, default, callback)
            local frame = Instance.new("Frame", inner)
            frame.Size = UDim2.new(1,0,0,28)
            frame.BackgroundTransparency = 1
            frame.LayoutOrder = #inner:GetChildren()

            local lbl = Instance.new("TextLabel", frame)
            lbl.Size = UDim2.new(0.82,0,1,0)
            lbl.BackgroundTransparency = 1
            lbl.Text = text or "Toggle"
            lbl.Font = Enum.Font.SourceSans
            lbl.TextSize = 14
            lbl.TextColor3 = THEME.Text
            lbl.TextXAlignment = Enum.TextXAlignment.Left

            local toggleBtn = Instance.new("TextButton", frame)
            toggleBtn.Size = UDim2.new(0.16,0,0.7,0)
            toggleBtn.Position = UDim2.new(0.84,0,0.15,0)
            toggleBtn.AnchorPoint = Vector2.new(0,0)
            toggleBtn.BackgroundColor3 = default and THEME.Accent or Color3.fromRGB(60,60,62)
            toggleBtn.BorderSizePixel = 0
            toggleBtn.Text = ""
            toggleBtn.AutoButtonColor = false

            local state = default or false
            toggleBtn.MouseButton1Click:Connect(function()
                state = not state
                makeTween(toggleBtn, {BackgroundColor3 = state and THEME.Accent or Color3.fromRGB(60,60,62)}, 0.12)
                pcall(function() if callback then callback(state) end end)
            end)

            updateSizes()
            return {
                SetState = function(val)
                    state = val
                    toggleBtn.BackgroundColor3 = state and THEME.Accent or Color3.fromRGB(60,60,62)
                end,
                GetState = function() return state end
            }
        end

        function folder:AddSlider(text, min,max,default,step,callback)
            local frame = Instance.new("Frame", inner)
            frame.Size = UDim2.new(1,0,0,44)
            frame.BackgroundTransparency = 1
            frame.LayoutOrder = #inner:GetChildren()

            local lbl = Instance.new("TextLabel", frame)
            lbl.Size = UDim2.new(0.6,0,0,18)
            lbl.BackgroundTransparency = 1
            lbl.Text = text or "Slider"
            lbl.Font = Enum.Font.SourceSans
            lbl.TextSize = 14
            lbl.TextColor3 = THEME.Text
            lbl.TextXAlignment = Enum.TextXAlignment.Left

            local valLbl = Instance.new("TextLabel", frame)
            valLbl.Size = UDim2.new(0.4,-6,0,18)
            valLbl.Position = UDim2.new(0.6,6,0,0)
            valLbl.BackgroundTransparency = 1
            valLbl.Text = tostring(default or min)
            valLbl.Font = Enum.Font.SourceSans
            valLbl.TextSize = 14
            valLbl.TextColor3 = THEME.Text
            valLbl.TextXAlignment = Enum.TextXAlignment.Right

            local track = Instance.new("Frame", frame)
            track.Size = UDim2.new(1,0,0,10)
            track.Position = UDim2.new(0,0,0,26)
            track.BackgroundColor3 = Color3.fromRGB(60,60,62)
            track.BorderSizePixel = 0

            local fill = Instance.new("Frame", track)
            fill.Size = UDim2.new( ((default or min)-min)/math.max(1,(max-min)), 0, 1, 0)
            fill.BackgroundColor3 = THEME.Accent
            fill.BorderSizePixel = 0

            local dragging = false
            local function updateFromPos(x)
                local rel = math.clamp((x - track.AbsolutePosition.X)/track.AbsoluteSize.X, 0,1)
                local value = min + rel*(max-min)
                if step and step > 0 then
                    value = math.floor(value/step + 0.5)*step
                end
                fill.Size = UDim2.new((value-min)/(max-min),0,1,0)
                valLbl.Text = tostring(round(value))
                pcall(function() if callback then callback(value) end end)
            end

            track.InputBegan:Connect(function(inp)
                if inp.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = true
                    updateFromPos(inp.Position.X)
                end
            end)
            track.InputEnded:Connect(function(inp)
                if inp.UserInputType == Enum.UserInputType.MouseButton1 then dragging = false end
            end)
            UserInputService.InputChanged:Connect(function(inp)
                if dragging and inp.UserInputType == Enum.UserInputType.MouseMovement then
                    updateFromPos(inp.Position.X)
                end
            end)

            updateSizes()
            return {
                SetValue = function(v)
                    local rel = (v - min)/(max-min)
                    fill.Size = UDim2.new(rel,0,1,0)
                    valLbl.Text = tostring(round(v))
                end,
                GetValue = function() return tonumber(valLbl.Text) end
            }
        end

        function folder:AddDropdown(text, items, defaultIndex, callback)
            local frame = Instance.new("Frame", inner)
            frame.Size = UDim2.new(1,0,0,30)
            frame.BackgroundTransparency = 1
            frame.LayoutOrder = #inner:GetChildren()

            local lbl = Instance.new("TextLabel", frame)
            lbl.Size = UDim2.new(0.6,0,1,0)
            lbl.BackgroundTransparency = 1
            lbl.Text = text or "Dropdown"
            lbl.Font = Enum.Font.SourceSans
            lbl.TextSize = 14
            lbl.TextColor3 = THEME.Text
            lbl.TextXAlignment = Enum.TextXAlignment.Left

            local selBtn = Instance.new("TextButton", frame)
            selBtn.Size = UDim2.new(0.38,0,1,0)
            selBtn.Position = UDim2.new(0.62,0,0,0)
            selBtn.BackgroundColor3 = Color3.fromRGB(60,60,62)
            selBtn.BorderSizePixel = 0
            selBtn.Text = tostring(items[defaultIndex] or items[1] or "")
            selBtn.Font = Enum.Font.SourceSans
            selBtn.TextSize = 14
            selBtn.TextColor3 = THEME.Text

            local open = false
            local dropdownFrame
            selBtn.MouseButton1Click:Connect(function()
                open = not open
                if open then
                    dropdownFrame = Instance.new("Frame", frame)
                    dropdownFrame.Size = UDim2.new(1,0,0, math.min(#items*28, 140))
                    dropdownFrame.Position = UDim2.new(0,0,1,6)
                    dropdownFrame.BackgroundColor3 = THEME.Background
                    dropdownFrame.BorderSizePixel = 0
                    dropdownFrame.ClipsDescendants = true

                    local list = Instance.new("UIListLayout", dropdownFrame)
                    list.SortOrder = Enum.SortOrder.LayoutOrder
                    for i,v in ipairs(items) do
                        local it = Instance.new("TextButton", dropdownFrame)
                        it.Size = UDim2.new(1,0,0,28)
                        it.BackgroundTransparency = 1
                        it.Text = v
                        it.TextColor3 = THEME.Text
                        it.Font = Enum.Font.SourceSans
                        it.TextSize = 14
                        it.LayoutOrder = i
                        it.MouseButton1Click:Connect(function()
                            selBtn.Text = v
                            pcall(function() if callback then callback(v) end end)
                            dropdownFrame:Destroy()
                            open = false
                        end)
                    end
                else
                    if dropdownFrame then dropdownFrame:Destroy() end
                end
            end)

            updateSizes()
            return {
                Set = function(v) selBtn.Text = v end,
                Get = function() return selBtn.Text end
            }
        end

        function folder:AddColorPicker(text, default, callback)
            local frame = Instance.new("Frame", inner)
            frame.Size = UDim2.new(1,0,0,30)
            frame.BackgroundTransparency = 1
            frame.LayoutOrder = #inner:GetChildren()

            local lbl = Instance.new("TextLabel", frame)
            lbl.Size = UDim2.new(0.6,0,1,0)
            lbl.BackgroundTransparency = 1
            lbl.Text = text or "Color"
            lbl.Font = Enum.Font.SourceSans
            lbl.TextSize = 14
            lbl.TextColor3 = THEME.Text
            lbl.TextXAlignment = Enum.TextXAlignment.Left

            local swatch = Instance.new("TextButton", frame)
            swatch.Size = UDim2.new(0.16,0,0.75,0)
            swatch.Position = UDim2.new(0.84,0,0.12,0)
            swatch.BackgroundColor3 = default or THEME.Accent
            swatch.BorderSizePixel = 0

            local open = false
            local pickerFrame
            swatch.MouseButton1Click:Connect(function()
                open = not open
                if open then
                    pickerFrame = Instance.new("Frame", frame)
                    pickerFrame.Size = UDim2.new(0,220,0,140)
                    pickerFrame.Position = UDim2.new(0,0,1,6)
                    pickerFrame.BackgroundColor3 = THEME.Background
                    pickerFrame.BorderSizePixel = 0

                    -- simple RGB sliders
                    local rS = Instance.new("TextLabel", pickerFrame)
                    rS.Size = UDim2.new(1,0,0,18); rS.Position = UDim2.new(0,6,0,6)
                    rS.BackgroundTransparency = 1; rS.Text = "R"
                    local r = Instance.new("TextBox", pickerFrame)
                    r.Size = UDim2.new(1,0,0,22); r.Position = UDim2.new(0,6,0,24)
                    r.Text = tostring(round((swatch.BackgroundColor3.R)*255))
                    local g = r:Clone(); g.Parent = pickerFrame; g.Position = UDim2.new(0,6,0,52); g.Text = tostring(round((swatch.BackgroundColor3.G)*255)); g.Name = "G"
                    local b = r:Clone(); b.Parent = pickerFrame; b.Position = UDim2.new(0,6,0,80); b.Text = tostring(round((swatch.BackgroundColor3.B)*255)); b.Name = "B"

                    local apply = Instance.new("TextButton", pickerFrame)
                    apply.Size = UDim2.new(1,0,0,24); apply.Position = UDim2.new(0,6,0,108)
                    apply.BackgroundColor3 = THEME.Accent; apply.Text = "Apply"; apply.BorderSizePixel = 0

                    apply.MouseButton1Click:Connect(function()
                        local rr = math.clamp(tonumber(r.Text) or 0,0,255)
                        local gg = math.clamp(tonumber(g.Text) or 0,0,255)
                        local bb = math.clamp(tonumber(b.Text) or 0,0,255)
                        local col = Color3.fromRGB(rr,gg,bb)
                        swatch.BackgroundColor3 = col
                        pcall(function() if callback then callback(col) end end)
                        pickerFrame:Destroy()
                        open = false
                    end)
                else
                    if pickerFrame then pickerFrame:Destroy() end
                end
            end)

            updateSizes()
            return {
                Set = function(c) swatch.BackgroundColor3 = c end,
                Get = function() return swatch.BackgroundColor3 end
            }
        end

        function folder:AddTextBox(text, placeholder, callback)
            local frame = Instance.new("Frame", inner)
            frame.Size = UDim2.new(1,0,0,34)
            frame.BackgroundTransparency = 1
            frame.LayoutOrder = #inner:GetChildren()

            local lbl = Instance.new("TextLabel", frame)
            lbl.Size = UDim2.new(0.36,0,1,0)
            lbl.BackgroundTransparency = 1
            lbl.Text = text or "Input"
            lbl.Font = Enum.Font.SourceSans
            lbl.TextSize = 14
            lbl.TextColor3 = THEME.Text
            lbl.TextXAlignment = Enum.TextXAlignment.Left

            local box = Instance.new("TextBox", frame)
            box.Size = UDim2.new(0.62,0,1,0)
            box.Position = UDim2.new(0.36,8,0,0)
            box.ClearTextOnFocus = false
            box.PlaceholderText = placeholder or ""
            box.BackgroundColor3 = Color3.fromRGB(40,40,42)
            box.BorderSizePixel = 0
            box.TextColor3 = THEME.Text
            box.Font = Enum.Font.SourceSans
            box.TextSize = 14

            box.FocusLost:Connect(function(enter)
                if enter then pcall(function() if callback then callback(box.Text) end end) end
            end)

            updateSizes()
            return box
        end

        return folder
    end

    return tab
end

-- Return library
return Lib
